local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local tau = 2 * math.pi
local Camera = Workspace.CurrentCamera
local Client = Players.LocalPlayer

local FOVSettings = {
    radius = 150,
    points = 50,
    drawings = {},
    old_mouse = {}
}

local FOVCircle = Drawing.new("Circle")
FOVCircle.Thickness = 2
FOVCircle.NumSides = FOVSettings.points
FOVCircle.Color = Color3.fromRGB(255, 255, 255)
FOVCircle.Visible = true

for i = 1, FOVSettings.points do
    FOVSettings.drawings[i] = Drawing.new("Line")
end

RunService.RenderStepped:Connect(function()
    local mousePos = UserInputService:GetMouseLocation()
    
    for index, drawing in pairs(FOVSettings.drawings) do
        local angle = tau * index / FOVSettings.points
        local x_offset = FOVSettings.radius * math.cos(angle)
        local y_offset = FOVSettings.radius * math.sin(angle)
        local pointPos = Vector2.new(mousePos.X + x_offset, mousePos.Y + y_offset)
        
        FOVSettings.old_mouse[index] = pointPos
    end
    
    for index, drawing in pairs(FOVSettings.drawings) do
        local angle = tau * index / FOVSettings.points
        local x_offset = FOVSettings.radius * math.cos(angle)
        local y_offset = FOVSettings.radius * math.sin(angle)
        local pointPos = Vector2.new(mousePos.X + x_offset, mousePos.Y + y_offset)
        
        drawing.From = FOVSettings.old_mouse[index] or mousePos
        drawing.To = pointPos + Vector2.new(1.5, 0)
        drawing.Color = Color3.fromHSV((tick() % 1 - (index / FOVSettings.points)) % 1, 0.5, 1)
    end
end)

local function getPlayerMouse()
    local dist = FOVSettings.radius
    local player = nil
    
    for _, v in pairs(Players:GetPlayers()) do
        if v == Client then
            continue
        end
        
        local char = v.Character
        local root = char and char:FindFirstChild("HumanoidRootPart")
        
        if char and root then
            local pos = Camera:WorldToViewportPoint(root.Position)
            local mag = (Vector2.new(pos.X, pos.Y) - UserInputService:GetMouseLocation()).Magnitude
            
            if mag < dist then
                dist = mag
                player = v
            end
        end
    end
    
    return player
end

local function getPrediction()
    local target = getPlayerMouse()
    
    if not target then
        return
    end
    
    local char = target.Character
    local root = char and char:FindFirstChild("HumanoidRootPart")
    local humanoid = char and char:FindFirstChild("Humanoid")
    
    if char and root and humanoid then
        local velocity_pred = root.Position + root.Velocity * 16
        local movedirection_pred = root.Position + humanoid.MoveDirection * 16
        
        return velocity_pred
    end
end

local index
index = hookmetamethod(game, "__index", function(self, key)
    if self:IsA("Mouse") and key == "Hit" then
        local target = getPlayerMouse()
        return target and CFrame.new(getPrediction()) or index(self, key)
    end

    return index(self, key)
end)